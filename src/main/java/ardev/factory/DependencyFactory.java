package ardev.factory;

import java.lang.reflect.Constructor;

/**
 * Фабрика для создания экземпляров классов.
 * Используется для динамического создания объектов на основе классов, которые
 * зарегистрированы в системе внедрения зависимостей. Обеспечивает унифицированный
 * способ инстанцирования объектов с помощью рефлексии.
 */
public class DependencyFactory {

    /**
     * Создает экземпляр указанного класса с использованием его конструктора по умолчанию.
     * Этот метод принимает класс и создает его новый экземпляр, делая конструктор доступным,
     * если он не является публичным.
     *
     * @param <T> тип класса, экземпляр которого нужно создать
     * @param implClass класс, экземпляр которого будет создан
     * @return новый экземпляр указанного класса
     * @throws Exception если возникает ошибка при создании экземпляра, включая
     * проблемы с доступом к конструктору или ошибки при его вызове.
     */
    public <T> T createInstance(Class<T> implClass) throws Exception {
        Constructor<T> constructor = implClass.getDeclaredConstructor();
        constructor.setAccessible(true);
        return constructor.newInstance();
    }
}